// <auto-generated />
using System;
using Backend.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.ProjectCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("Budget")
                        .HasColumnType("integer");

                    b.Property<int?>("Contents")
                        .HasColumnType("integer");

                    b.Property<int?>("Deadlines")
                        .HasColumnType("integer");

                    b.Property<int?>("Goals")
                        .HasColumnType("integer");

                    b.Property<int?>("Progress")
                        .HasColumnType("integer");

                    b.Property<string>("ReportLink")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectsCondition");
                });

            modelBuilder.Entity("Backend.Models.ProjectCost", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<float?>("ActualCAPEXExt")
                        .HasColumnType("real");

                    b.Property<float?>("ActualCAPEXExtDelta")
                        .HasColumnType("real");

                    b.Property<float?>("ActualCAPEXExtDeltaPercent")
                        .HasColumnType("real");

                    b.Property<float?>("ActualCAPEXWF")
                        .HasColumnType("real");

                    b.Property<float?>("ActualOPEX")
                        .HasColumnType("real");

                    b.Property<float?>("BaseCAPEXExt")
                        .HasColumnType("real");

                    b.Property<float?>("BaseCAPEXWF")
                        .HasColumnType("real");

                    b.Property<float?>("BaseOPEX")
                        .HasColumnType("real");

                    b.Property<float?>("PassportCAPEXExt")
                        .HasColumnType("real");

                    b.Property<float?>("PassportCAPEXExtDelta")
                        .HasColumnType("real");

                    b.Property<float?>("PassportCAPEXExtDeltaPercent")
                        .HasColumnType("real");

                    b.Property<float?>("PassportCAPEXWF")
                        .HasColumnType("real");

                    b.Property<float?>("PassportOPEX")
                        .HasColumnType("real");

                    b.Property<float?>("PreCAPEXExt")
                        .HasColumnType("real");

                    b.Property<float?>("PreCAPEXExtActual")
                        .HasColumnType("real");

                    b.Property<float?>("PreCAPEXExtDeltaPercent")
                        .HasColumnType("real");

                    b.Property<float?>("PreCAPEXWF")
                        .HasColumnType("real");

                    b.Property<float?>("PreOPEX")
                        .HasColumnType("real");

                    b.Property<string>("Profitability")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectsCost");
                });

            modelBuilder.Entity("Backend.Models.ProjectDocuments", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Budget")
                        .HasColumnType("text");

                    b.Property<string>("CloseCompleteDecision")
                        .HasColumnType("text");

                    b.Property<string>("CloseReason")
                        .HasColumnType("text");

                    b.Property<string>("Contents")
                        .HasColumnType("text");

                    b.Property<string>("ImplStartDecision")
                        .HasColumnType("text");

                    b.Property<string>("PrePStartDecision")
                        .HasColumnType("text");

                    b.Property<string>("ReasonCRBudget")
                        .HasColumnType("text");

                    b.Property<string>("ReasonCRContents")
                        .HasColumnType("text");

                    b.Property<string>("ReasonCRTimelines")
                        .HasColumnType("text");

                    b.Property<string>("StopReason")
                        .HasColumnType("text");

                    b.Property<string>("StopResumeDecision")
                        .HasColumnType("text");

                    b.Property<string>("Timelines")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectsDocuments");
                });

            modelBuilder.Entity("Backend.Models.ProjectGeneralInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Activity")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Monitoring")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("Priority")
                        .HasColumnType("float4");

                    b.Property<string>("Program")
                        .HasColumnType("text");

                    b.Property<string>("RGT")
                        .HasColumnType("char");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StrategyBelonging")
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectsGeneralInfo");
                });

            modelBuilder.Entity("Backend.Models.ProjectGoals", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AchieveCriteria")
                        .HasColumnType("text");

                    b.Property<string>("BusinessGoals")
                        .HasColumnType("text");

                    b.Property<string>("BusinessGoalsStatus")
                        .HasColumnType("text");

                    b.Property<string>("GoalsStatus")
                        .HasColumnType("text");

                    b.Property<string>("ImplCriteria")
                        .HasColumnType("text");

                    b.Property<string>("Product")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectsGoals");
                });

            modelBuilder.Entity("Backend.Models.ProjectTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ADM")
                        .HasColumnType("text");

                    b.Property<string>("BusinessAnalyst")
                        .HasColumnType("text");

                    b.Property<string>("BusinessLines")
                        .HasColumnType("text");

                    b.Property<string>("Customer")
                        .HasColumnType("text");

                    b.Property<string>("ExternalPeople")
                        .HasColumnType("text");

                    b.Property<string>("FRC")
                        .HasColumnType("text");

                    b.Property<string>("MCPeople")
                        .HasColumnType("text");

                    b.Property<string>("Manager")
                        .HasColumnType("text");

                    b.Property<string>("ProductOwner")
                        .HasColumnType("text");

                    b.Property<string>("Stakeholders")
                        .HasColumnType("text");

                    b.Property<string>("TeamLead")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectsTeam");
                });

            modelBuilder.Entity("Backend.Models.ProjectTimelines", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("ActualDuration")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("ActualEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ActualStart")
                        .HasColumnType("date");

                    b.Property<int?>("BaseDeviation")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("BaseEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("BaseStart")
                        .HasColumnType("date");

                    b.Property<int?>("PassportDeviation")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("PassportEnd")
                        .HasColumnType("date");

                    b.Property<int?>("PassportEndYear")
                        .HasColumnType("integer");

                    b.Property<int?>("PassportStartYear")
                        .HasColumnType("integer");

                    b.Property<int?>("PreDeviation")
                        .HasColumnType("integer");

                    b.Property<int?>("PreDuration")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("PreEndActual")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("PreEndPlanned")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("PreStart")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("ProjectsTimelines");
                });

            modelBuilder.Entity("Backend.Models.Views.ProjectConditionView", b =>
                {
                    b.Property<int?>("Budget")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Contents")
                        .HasColumnType("integer");

                    b.Property<int?>("Deadlines")
                        .HasColumnType("integer");

                    b.Property<int?>("Goals")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Progress")
                        .HasColumnType("integer");

                    b.Property<string>("ReportLink")
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("ProjectsConditionView", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Views.ProjectCostView", b =>
                {
                    b.Property<float?>("ActualCAPEXExt")
                        .HasColumnType("real");

                    b.Property<float?>("ActualCAPEXWF")
                        .HasColumnType("real");

                    b.Property<float?>("ActualOPEX")
                        .HasColumnType("real");

                    b.Property<float?>("BaseCAPEXExt")
                        .HasColumnType("real");

                    b.Property<float?>("BaseCAPEXWF")
                        .HasColumnType("real");

                    b.Property<float?>("BaseOPEX")
                        .HasColumnType("real");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("PassportCAPEXExt")
                        .HasColumnType("real");

                    b.Property<float?>("PassportCAPEXWF")
                        .HasColumnType("real");

                    b.Property<float?>("PassportOPEX")
                        .HasColumnType("real");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("ProjectsCostView", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Views.ProjectDocumentsView", b =>
                {
                    b.Property<string>("Budget")
                        .HasColumnType("text");

                    b.Property<string>("CloseCompleteDecision")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contents")
                        .HasColumnType("text");

                    b.Property<string>("ImplStartDecision")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StopResumeDecision")
                        .HasColumnType("text");

                    b.Property<string>("Timelines")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("ProjectsDocumentsView", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Views.ProjectGoalsView", b =>
                {
                    b.Property<string>("AchieveCriteria")
                        .HasColumnType("text");

                    b.Property<string>("BusinessGoals")
                        .HasColumnType("text");

                    b.Property<string>("BusinessGoalsStatus")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GoalsStatus")
                        .HasColumnType("text");

                    b.Property<string>("ImplCriteria")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Product")
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("ProjectsGoalsView", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Views.ProjectTeamView", b =>
                {
                    b.Property<string>("BusinessAnalyst")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Customer")
                        .HasColumnType("text");

                    b.Property<string>("MCPeople")
                        .HasColumnType("text");

                    b.Property<string>("Manager")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TeamLead")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("ProjectsTeamView", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Views.ProjectTimelinesView", b =>
                {
                    b.Property<int?>("ActualDuration")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("ActualEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ActualStart")
                        .HasColumnType("date");

                    b.Property<int?>("BaseDeviation")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("BaseEnd")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PassportEndYear")
                        .HasColumnType("integer");

                    b.Property<int?>("PassportStartYear")
                        .HasColumnType("integer");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("ProjectsTimelinesView", (string)null);
                });

            modelBuilder.Entity("Backend.Models.ProjectCondition", b =>
                {
                    b.HasOne("Backend.Models.ProjectGeneralInfo", "GeneralInfo")
                        .WithOne("Condition")
                        .HasForeignKey("Backend.Models.ProjectCondition", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralInfo");
                });

            modelBuilder.Entity("Backend.Models.ProjectCost", b =>
                {
                    b.HasOne("Backend.Models.ProjectGeneralInfo", "GeneralInfo")
                        .WithOne("Cost")
                        .HasForeignKey("Backend.Models.ProjectCost", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralInfo");
                });

            modelBuilder.Entity("Backend.Models.ProjectDocuments", b =>
                {
                    b.HasOne("Backend.Models.ProjectGeneralInfo", "GeneralInfo")
                        .WithOne("Documents")
                        .HasForeignKey("Backend.Models.ProjectDocuments", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralInfo");
                });

            modelBuilder.Entity("Backend.Models.ProjectGoals", b =>
                {
                    b.HasOne("Backend.Models.ProjectGeneralInfo", "GeneralInfo")
                        .WithOne("Goals")
                        .HasForeignKey("Backend.Models.ProjectGoals", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralInfo");
                });

            modelBuilder.Entity("Backend.Models.ProjectTeam", b =>
                {
                    b.HasOne("Backend.Models.ProjectGeneralInfo", "GeneralInfo")
                        .WithOne("Team")
                        .HasForeignKey("Backend.Models.ProjectTeam", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralInfo");
                });

            modelBuilder.Entity("Backend.Models.ProjectTimelines", b =>
                {
                    b.HasOne("Backend.Models.ProjectGeneralInfo", "GeneralInfo")
                        .WithOne("Timelines")
                        .HasForeignKey("Backend.Models.ProjectTimelines", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralInfo");
                });

            modelBuilder.Entity("Backend.Models.ProjectGeneralInfo", b =>
                {
                    b.Navigation("Condition");

                    b.Navigation("Cost");

                    b.Navigation("Documents");

                    b.Navigation("Goals");

                    b.Navigation("Team");

                    b.Navigation("Timelines");
                });
#pragma warning restore 612, 618
        }
    }
}
